// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id              String        @id @default(cuid())
  name            String?
  email           String?       @unique
  password        String?
  emailVerified   DateTime?     @map("email_verified")
  image           String?
  accounts        Account[]
  sessions        Session[]
  Drafts          Draft[]
  Blogs           Blog[]
  Follows         User[]        @relation("follow")
  FollowedBy      User[]        @relation("follow")
  BlogComment     BlogComment[]
  likes           Blog[]        @relation("liked")
  dislikes        Blog[]        @relation("disliked")
  likedComment    BlogComment[] @relation("likedComment")
  dislikedComment BlogComment[] @relation("dislikedComment")
  ViewedBlogs     Blog[]        @relation("viewed")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model BlogContent {
  id        String   @id @default(uuid())
  content   Json
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Draft     Draft[]
  Blog      Blog[]

  @@map("blog_contents")
}

model Draft {
  id          String      @id @default(uuid())
  name        String
  Author      User        @relation(fields: [userId], references: [id])
  BlogContent BlogContent @relation(fields: [blogContentId], references: [id])

  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  userId        String   @map("user_id")
  blogContentId String   @map("blog_content_id")

  @@unique([name, userId])
  @@map("drafts")
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  blogs     Blog[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Blog {
  id            String        @id @default(uuid())
  imageUrl      String        @map("img_url")
  title         String
  description   String
  Categories    Category[]
  Author        User          @relation(fields: [userId], references: [id])
  BlogContent   BlogContent   @relation(fields: [blogContentId], references: [id])
  likedBy       User[]        @relation("liked")
  dislikedBy    User[]        @relation("disliked")
  userId        String        @map("user_id")
  blogContentId String        @map("blog_content_id")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  BlogComment   BlogComment[]
  viewedBy      User[]        @relation("viewed")

  @@unique([title, userId])
  @@map("blogs")
}

model BlogComment {
  id         String   @id @default(uuid())
  Author     User     @relation(fields: [userId], references: [id])
  Blog       Blog     @relation(fields: [blogId], references: [id])
  content    String
  likedBy    User[]   @relation("likedComment")
  dislikedBy User[]   @relation("dislikedComment")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  userId     String   @map("user_id")
  blogId     String   @map("blog_id")

  @@map("blog_comments")
}
